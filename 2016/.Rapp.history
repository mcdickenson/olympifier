v[ , 2]
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		if(iters == max_iters){#
			print(state)#
			print(actions[which(o==max(o))])#
		}#
	}#
	iters = iters + 1#
}
delta     = 0.8#
max_iters = 100#
v = matrix(0, nrow=length(states), ncol=max_iters)#
rownames(v) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		if(iters == max_iters){#
			print(state)#
			print(actions[which(o==max(o))])#
		}#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
rownames(v) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		if(iters == max_iters){#
			print(state)#
			print(actions[which(o==max(o))])#
		}#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]
dim(v)
delta     = 0.8#
max_iters = 10#
v = matrix(0, nrow=length(states), ncol=max_iters)#
rownames(v) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		if(iters == max_iters){#
			print(state)#
			print(actions[which(o==max(o))])#
		}#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
rownames(v) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		if(iters == max_iters){#
			print(state)#
			print(actions[which(o==max(o))])#
		}#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]
v
a
v[ , c(6, 25)]
delta     = 1#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]
a
actions
v
delta     = 1#
max_iters = 50#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]
delta     = 0.5#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]#
epsilon   = 0.001
v
a
actions[2]
drive["top", "top"]         = 1#
drive["top", "rolling"]     = 0#
drive["top", "bottom"]      = .0#
drive["rolling", "top"]     = .3#
drive["rolling", "rolling"] = .6#
drive["rolling", "bottom"]  = .1#
drive["bottom", "top"]      = .6#
drive["bottom", "rolling"]  = 0#
drive["bottom", "bottom"]   = .4
drive
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]
v
a
actions[1]
drive     = matrix(NA, nrow=3, ncol=3)#
not.drive = matrix(NA, nrow=3, ncol=3)#
states  = c("top", "rolling", "bottom")#
actions = c("drive", "not.drive")#
#
rownames(drive) = rownames(not.drive) = states#
colnames(drive) = colnames(not.drive) = states#
#
drive["top", "top"]         = 1#
drive["top", "rolling"]     = 0#
drive["top", "bottom"]      = .0#
drive["rolling", "top"]     = .3#
drive["rolling", "rolling"] = .6#
drive["rolling", "bottom"]  = .1#
drive["bottom", "top"]      = .6#
drive["bottom", "rolling"]  = 0#
drive["bottom", "bottom"]   = .4#
#
not.drive["top", "top"]         = .7#
not.drive["top", "rolling"]     = .3#
not.drive["top", "bottom"]      = .0#
not.drive["rolling", "top"]     = 0#
not.drive["rolling", "rolling"] = 1#
not.drive["rolling", "bottom"]  = 0#
not.drive["bottom", "top"]      = 0#
not.drive["bottom", "rolling"]  = 0#
not.drive["bottom", "bottom"]   = 1#
#
# Set up utility matrix#
utils = matrix(NA, nrow=3, ncol=2)#
rownames(utils) = states#
colnames(utils) = actions#
utils["top", "drive"]         = 2#
utils["top", "not.drive"]     = 3#
utils["rolling", "drive"]     = 0#
utils["rolling", "not.drive"] = 1#
utils["bottom", "drive"]      = 0#
utils["bottom", "not.drive"]  = 1
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
a
drive     = matrix(NA, nrow=3, ncol=3)#
not.drive = matrix(NA, nrow=3, ncol=3)#
states  = c("top", "rolling", "bottom")#
actions = c("drive", "not.drive")#
#
rownames(drive) = rownames(not.drive) = states#
colnames(drive) = colnames(not.drive) = states#
#
drive["top", "top"]         = .9#
drive["top", "rolling"]     = .1#
drive["top", "bottom"]      = .0#
drive["rolling", "top"]     = .3#
drive["rolling", "rolling"] = .6#
drive["rolling", "bottom"]  = .1#
drive["bottom", "top"]      = .6#
drive["bottom", "rolling"]  = 0#
drive["bottom", "bottom"]   = .4#
#
not.drive["top", "top"]         = .7#
not.drive["top", "rolling"]     = .3#
not.drive["top", "bottom"]      = .0#
not.drive["rolling", "top"]     = 0#
not.drive["rolling", "rolling"] = 0#
not.drive["rolling", "bottom"]  = 1#
not.drive["bottom", "top"]      = 0#
not.drive["bottom", "rolling"]  = 0#
not.drive["bottom", "bottom"]   = 1#
#
# Set up utility matrix#
utils = matrix(NA, nrow=3, ncol=2)#
rownames(utils) = states#
colnames(utils) = actions#
utils["top", "drive"]         = 2#
utils["top", "not.drive"]     = 3#
utils["rolling", "drive"]     = 0#
utils["rolling", "not.drive"] = 1#
utils["bottom", "drive"]      = 0#
utils["bottom", "not.drive"]  = 1
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		# a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
a
v
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		# a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]
v
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]#
a[ , max_iters]
a
actions
v
a
v
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
v
a
actions
a[ , 1] = rep(which(actions=="not.drive"), 3) # not.drive
a
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
a[ , 1] = rep(which(actions=="not.drive"), 3)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)
a
v
utils
v[ , 1] = utils[ , a[, 1]]
v
utils
a[,1]
v[ , 1] = utils[ 1:3 , a[, 1]]
utils[1:3, a[,1]]
a[ , 1] = rep(which(actions=="not.drive"), 3)#
v[ , 1] = utils[ , 2]
v
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
v
a
actions
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
	}#
	iters = iters + 1#
}#
#
v[ , max_iters]
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
a[ , 1] = rep(which(actions=="not.drive"), 3)#
v[ , 1] = utils[ , 2]#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
v
a
drive["top", "top"]         = 1#
drive["top", "rolling"]     = .0#
drive["top", "bottom"]      = .0
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
a[ , 1] = rep(which(actions=="not.drive"), 3)#
v[ , 1] = utils[ , 2]#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
a
drive
drive["top", "top"]         = .9#
drive["top", "rolling"]     = .1#
drive["top", "bottom"]      = .0#
drive["rolling", "top"]     = .3#
drive["rolling", "rolling"] = .6#
drive["rolling", "bottom"]  = .1#
drive["bottom", "top"]      = .6#
drive["bottom", "rolling"]  = 0#
drive["bottom", "bottom"]   = .4#
#
not.drive["top", "top"]         = .7#
not.drive["top", "rolling"]     = .3#
not.drive["top", "bottom"]      = .0#
not.drive["rolling", "top"]     = 0#
not.drive["rolling", "rolling"] = 0#
not.drive["rolling", "bottom"]  = 1#
not.drive["bottom", "top"]      = 0#
not.drive["bottom", "rolling"]  = 0#
not.drive["bottom", "bottom"]   = 1
not.drive["rolling", "top"]     = 0#
not.drive["rolling", "rolling"] = 1#
not.drive["rolling", "bottom"]  = 0
delta     = 0.8#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
a[ , 1] = rep(which(actions=="not.drive"), 3)#
v[ , 1] = utils[ , 2]#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
a
actions
drive["top", "top"]         = .9#
drive["top", "rolling"]     = .1#
drive["top", "bottom"]      = .0#
drive["rolling", "top"]     = .3#
drive["rolling", "rolling"] = .6#
drive["rolling", "bottom"]  = .1#
drive["bottom", "top"]      = .6#
drive["bottom", "rolling"]  = 0#
drive["bottom", "bottom"]   = .4#
#
not.drive["top", "top"]         = .7#
not.drive["top", "rolling"]     = .3#
not.drive["top", "bottom"]      = .0#
not.drive["rolling", "top"]     = 0#
not.drive["rolling", "rolling"] = 0#
not.drive["rolling", "bottom"]  = 1#
not.drive["bottom", "top"]      = 0#
not.drive["bottom", "rolling"]  = 0#
not.drive["bottom", "bottom"]   = 1
delta     = 0.5#
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
a[ , 1] = rep(which(actions=="not.drive"), 3)#
v[ , 1] = utils[ , 2]#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
a
delta
delta = 0.8
utils["bottom", "not.drive"]  = 3
utils
max_iters = 25#
v = matrix(0, nrow=length(states), ncol=max_iters)#
a = matrix(NA, nrow=length(states), ncol=max_iters)#
rownames(v) = rownames(a) = states#
options = list("drive" = 0, "not.drive" = 0)#
#
a[ , 1] = rep(which(actions=="not.drive"), 3)#
v[ , 1] = utils[ , 2]#
#
iters = 2#
while (iters <= max_iters) {#
	for (state in states){#
		for(action in actions){#
			options[action][[1]] = utils[state, action]#
			for(next.state in states){#
				cmd = paste(action, '["', state, '", "', next.state, '"]', sep="")#
				p = eval(parse(text=cmd))#
				options[action][[1]] = options[action][[1]] + #
					delta * p * v[next.state, iters-1]#
			}#
		}#
		o = unlist(options)#
		v[state, iters] = max(o)#
		a[state, iters] = which(o==max(o))#
	}#
	iters = iters + 1#
}
v
a
setwd('~/github/olympifier/2016')
athletes = read.csv('data/usa2016_clean.csv', header=TRUE, as.is=TRUE)
head(athletes)
athletes[1,]
athletes[1,]$height
s = _
s = athletes[1,]$height
s
strsplit(x, "-")
strsplit(s, "-")
strsplit(s, "-")[[1]]
athletes[3,]$heig
athletes[3,]$height
int("74")
strtoi("74")
height_to_inches = func(string) {#
	if(string==""){#
		return NA#
	}#
	feet_and_inches = strsplit(s, "-")[[1]]#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return feet*12 + inches#
}
height_to_inches = func(string) {#
	if(string==""){#
		return(NA)#
	}#
	feet_and_inches = strsplit(s, "-")[[1]]#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return(feet*12 + inches)#
}
height_to_inches = function(string) {#
	if(string==""){#
		return(NA)#
	}#
	feet_and_inches = strsplit(s, "-")[[1]]#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return(feet*12 + inches)#
}
height_to_inches('6-0')
athletes$height_inches = height_to_inches(athletes$height)
head(athletes)
height_to_inches = function(string) {#
	if(string==""){#
		return(NA)#
	}#
	feet_and_inches = strsplit(s, "-")#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return(feet*12 + inches)#
}#
athletes$height_inches = height_to_inches(athletes$height)
head(athletes)
athletes$height_inches = apply(athletes$height, 1, height_to_inches)
head(athletes)
height_to_inches = function(string) {#
	if(string==""){#
		return(NA)#
	}#
	feet_and_inches = strsplit(s, "-")[[1]]#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return(feet*12 + inches)#
}#
athletes$height_inches = apply(athletes$height, 1, height_to_inches)
head(athletes)
athletes$height_inches = apply(athletes$height, 2, height_to_inches)
athletes$height_inches = lapply(athletes$height, 2, height_to_inches)
athletes$height_inches = lapply(athletes$height, height_to_inches)
head(athletes)
height_to_inches = function(string) {#
	if(string==""){#
		return(NA)#
	}#
	feet_and_inches = strsplit(s, "-")#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return(feet*12 + inches)#
}#
athletes$height_inches = lapply(athletes$height, height_to_inches)
head(athletes)
library(string)
library(stringr)
height_to_inches = function(string) {#
	if(string==""){#
		return(NA)#
	}#
	feet_and_inches = str_split_fixed(s, "-", 2)#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return(feet*12 + inches)#
}#
athletes$height_inches = lapply(athletes$height, height_to_inches)
head(athletes)
athletes$height_feet = strsplit(athletes$height)[1]
athletes$height_feet = strsplit(athletes$height, '-')[1]
head(athletes)
athletes$height_feet = unlist(strsplit(athletes$height, '-'))
height_to_inches = function(string) {#
	if(string==""){#
		return(NA)#
	}#
	feet_and_inches = unlist(strsplit(s, "-"))#
	feet   = strtoi(feet_and_inches[1])#
	inches = strtoi(feet_and_inches[2])#
	return(feet*12 + inches)#
}#
athletes$height_inches = lapply(athletes$height, height_to_inches)
head(athletes)
unlist(strsplit(athletes$height, '-'))
athletes = read.csv('data/usa2016_clean.csv', header=TRUE, as.is=TRUE)
athletes$height_inches = lapply(lapply(athletes$height, height_to_inches), `[[`, 1)
head(athletes)
str_split_fixed(athletes$height, '-', 2)
str_split_fixed(athletes$height, '-', 2)[1]
str_split_fixed(athletes$height, '-', 2)[,1]
athletes$height_feet = strtoi(str_split_fixed(athletes$height, '-', 2)[,1])
athletes$height_inches = strtoi(str_split_fixed(athletes$height, '-', 2)[,2])
head(athletes)
athletes = read.csv('data/usa2016_clean.csv', header=TRUE, as.is=TRUE)
athletes$height_feet = strtoi(str_split_fixed(athletes$height, '-', 2)[,1])
athletes$height_inches = strtoi(str_split_fixed(athletes$height, '-', 2)[,2])
head(athletes)
athletes$height_converted = athletes$height_feet * 12 + athletes$height_inches
head(athletes)
athletes$dob = as.date(athletes$dob)
athletes$dob = as.Date(athletes$dob)
head(athletes)
tail(athletes)
?as.Date
athletes$dob = as.Date(athletes$dob, format="%m/%d/%Y")
head(athletes)
olympics_start = as.Date("8/5/2016", format="%m/%d/%Y")
athletes$age = olympics_start - athletes$dob
head(athletes)
athletes$age = as.numeric(athletes$age, units="years")
?as.numeric
athletes$age = as.numeric(athletes$age, units="days")
head(athletes)
olympics_start = as.Date("8/5/2016", format="%m/%d/%Y")
athletes$age = olympics_start - athletes$dob
athletes$age = as.numeric(athletes$age, units="years")/365
athletes$age = as.numeric(athletes$age, units="days")/365
head(athletes)
athletes$female = ifelse(athletes$gender=="W", 1, 0)
head(athletes)
want.cols = c('sport', 'height_converted', 'age', 'female')
want.rows = complete.cases(athletes[,want.cols])
dim(athletes)
athletes = athletes[want.rows, want.cols]
dim(athletes)
library(RColorBrewer)
athletes$color = NA
athletes$symbol = NA
sports = sort(unique(athletes$sport))
sports
colors = rep(brewer.pal(6,"Set1"),times=5)
symbols = rep(c(15,16,17,18,19,20),each=5)
sports.colors.symbols = cbind(sports, colors[1:length(sports)], symbols[1:length(sports)])
colnames(sports.colors.symbols) = c("sport", "color", "symbol")
for(i in 1:nrow(sports.colors.symbols) ){#
  sport  = sports.colors.symbols[i, "sport"]#
  color  = sports.colors.symbols[i, "color"]#
  symbol = sports.colors.symbols[i, "symbol"]#
  athletes$Color  = ifelse(athletes$Sport==sport, color, athletes$Color)#
  athletes$Symbol = ifelse(athletes$Sport==sport, symbol, athletes$Symbol)#
}
for(i in 1:nrow(sports.colors.symbols) ){#
  sport  = sports.colors.symbols[i, "sport"]#
  color  = sports.colors.symbols[i, "color"]#
  symbol = sports.colors.symbols[i, "symbol"]#
  athletes$color  = ifelse(athletes$sport==sport, color, athletes$color)#
  athletes$symbol = ifelse(athletes$sport==sport, symbol, athletes$symbol)#
}
head(athletes)
male   = athletes[which(athletes$female==0),]
female = athletes[which(athletes$female==1),]
athletes$height = athletes$height_converted
features = c("age", "height", "weight")
target = "sport"
male   = athletes[which(athletes$female==0),]
female = athletes[which(athletes$female==1),]
dim(female)
crossPlot = function(subset){#
  clPairs(data = subset[, features],#
    classification = subset[, target],#
    colors = subset$color,#
    symbols = as.numeric(subset$symbol)#
  )#
}
pdf("graphics/crossplot-male.pdf")#
crossPlot(male)#
dev.off()
library(mclust)
pdf("graphics/crossplot-male.pdf")#
crossPlot(male)#
dev.off()
head(athletes)
head(male)
want.cols = c('sport', 'height_converted', 'weight', 'age', 'female')
want.rows = complete.cases(athletes[,want.cols])
athletes = read.csv('data/usa2016_clean.csv', header=TRUE, as.is=TRUE)#
# tranform height into inches#
athletes$height_feet = strtoi(str_split_fixed(athletes$height, '-', 2)[,1])#
athletes$height_inches = strtoi(str_split_fixed(athletes$height, '-', 2)[,2])#
athletes$height_converted = athletes$height_feet * 12 + athletes$height_inches#
#
# transform dob into age#
athletes$dob = as.Date(athletes$dob, format="%m/%d/%Y")#
olympics_start = as.Date("8/5/2016", format="%m/%d/%Y")#
athletes$age = olympics_start - athletes$dob#
athletes$age = as.numeric(athletes$age, units="days")/365#
#
# transform gender into 1/0#
athletes$female = ifelse(athletes$gender=="W", 1, 0)#
#
# subset into complete cases#
want.cols = c('sport', 'height_converted', 'weight', 'age', 'female')#
want.rows = complete.cases(athletes[,want.cols])#
dim(athletes) # 544 observations#
athletes = athletes[want.rows, want.cols]#
dim(athletes) # 522 observations#
#
# add colors and symbols#
athletes$color = NA#
athletes$symbol = NA#
sports = sort(unique(athletes$sport))#
colors = rep(brewer.pal(6,"Set1"),times=5)#
symbols = rep(c(15,16,17,18,19,20),each=5)#
#
sports.colors.symbols = cbind(sports, colors[1:length(sports)], symbols[1:length(sports)])#
colnames(sports.colors.symbols) = c("sport", "color", "symbol")#
#
for(i in 1:nrow(sports.colors.symbols) ){#
  sport  = sports.colors.symbols[i, "sport"]#
  color  = sports.colors.symbols[i, "color"]#
  symbol = sports.colors.symbols[i, "symbol"]#
  athletes$color  = ifelse(athletes$sport==sport, color, athletes$color)#
  athletes$symbol = ifelse(athletes$sport==sport, symbol, athletes$symbol)#
}#
# visualize#
athletes$height = athletes$height_converted#
features = c("age", "height", "weight")#
target = "sport"#
male   = athletes[which(athletes$female==0),]#
female = athletes[which(athletes$female==1),]#
dim(female)
head(male)
pdf("graphics/crossplot-male.pdf")
crossPlot(male)
dev.off()
head('male')
head(male)
tail(mail)
tail(male)
brewer.pal(6,"Set1")
colors
symbols
len(symbols)
size(symbols)
count(symbols)
dim(symbols)
dim(colors)
length(symbols)
length(colors)
length(sports)
sports.colors.symbols
crossPlot = function(subset){#
  clPairs(data = subset[, features],#
    classification = subset[, target],#
    colors = subset$color,#
    symbols = as.numeric(subset$symbol)#
  )#
}
crossPlot(male)
head(male)
class(male$height)
class(male$weight)
athletes$weight = strtoi(athletes$weight)
male   = athletes[which(athletes$female==0),]
female = athletes[which(athletes$female==1),]
crossPlot(male)
summary(athletes$age)
athletes[which(athletes$age > 40)]
athletes[which(athletes$age > 40),]
athletes[which(athletes$age > 100),]
athletes$age = ifelse(athletes$age > 100, NA, athletes$age)
athletes = read.csv('data/usa2016_clean.csv', header=TRUE, as.is=TRUE)#
# tranform height into inches#
athletes$height_feet = strtoi(str_split_fixed(athletes$height, '-', 2)[,1])#
athletes$height_inches = strtoi(str_split_fixed(athletes$height, '-', 2)[,2])#
athletes$height_converted = athletes$height_feet * 12 + athletes$height_inches#
#
# transform dob into age#
athletes$dob = as.Date(athletes$dob, format="%m/%d/%Y")#
olympics_start = as.Date("8/5/2016", format="%m/%d/%Y")#
athletes$age = olympics_start - athletes$dob#
athletes$age = as.numeric(athletes$age, units="days")/365#
athletes$age = ifelse(athletes$age > 100, NA, athletes$age)#
#
# transform gender into 1/0#
athletes$female = ifelse(athletes$gender=="W", 1, 0)#
#
# subset into complete cases#
want.cols = c('sport', 'height_converted', 'weight', 'age', 'female')#
want.rows = complete.cases(athletes[,want.cols])#
dim(athletes) # 544 observations#
athletes = athletes[want.rows, want.cols]#
dim(athletes) # 522 observation
athletes$color = NA#
athletes$symbol = NA#
sports = sort(unique(athletes$sport))#
colors = rep(brewer.pal(6,"Set1"),times=5)#
symbols = rep(c(15,16,17,18,19,20),each=5)#
#
sports.colors.symbols = cbind(sports, colors[1:length(sports)], symbols[1:length(sports)])#
colnames(sports.colors.symbols) = c("sport", "color", "symbol")#
#
for(i in 1:nrow(sports.colors.symbols) ){#
  sport  = sports.colors.symbols[i, "sport"]#
  color  = sports.colors.symbols[i, "color"]#
  symbol = sports.colors.symbols[i, "symbol"]#
  athletes$color  = ifelse(athletes$sport==sport, color, athletes$color)#
  athletes$symbol = ifelse(athletes$sport==sport, symbol, athletes$symbol)#
}#
# visualize#
athletes$height = athletes$height_converted#
athletes$weight = strtoi(athletes$weight)#
features = c("age", "height", "weight")#
target = "sport"#
male   = athletes[which(athletes$female==0),]#
female = athletes[which(athletes$female==1),]#
dim(female)#
#
crossPlot = function(subset){#
  clPairs(data = subset[, features],#
    classification = subset[, target],#
    colors = subset$color,#
    symbols = as.numeric(subset$symbol)#
  )#
}
crossPlot(male)
pdf("graphics/crossplot-male.pdf")#
crossPlot(male)#
dev.off()
pdf("graphics/crossplot-female.pdf")#
crossPlot(female)#
dev.off()
pdf("graphics/crossplot-legend.pdf")#
plot.new()#
legend("left",#
  legend = sports.colors.symbols[,'sport'],#
  col    = sports.colors.symbols[,'color'],#
  pch    = as.numeric(#
            sports.colors.symbols[,'symbol']#
          ),#
  cex=0.8#
)#
dev.off()
write.csv(athletes, file="data/athletes_mod.csv", row.names=FALSE)
symbols = rep(c(21,22,23,24,25),each=6)
sports.colors.symbols = cbind(sports, colors[1:length(sports)], symbols[1:length(sports)])#
colnames(sports.colors.symbols) = c("sport", "color", "symbol")#
#
for(i in 1:nrow(sports.colors.symbols) ){#
  sport  = sports.colors.symbols[i, "sport"]#
  color  = sports.colors.symbols[i, "color"]#
  symbol = sports.colors.symbols[i, "symbol"]#
  athletes$color  = ifelse(athletes$sport==sport, color, athletes$color)#
  athletes$symbol = ifelse(athletes$sport==sport, symbol, athletes$symbol)#
}
athletes$height = athletes$height_converted#
athletes$weight = strtoi(athletes$weight)#
features = c("age", "height", "weight")#
target = "sport"#
male   = athletes[which(athletes$female==0),]#
female = athletes[which(athletes$female==1),]#
dim(female)
crossPlot(male)
pdf("graphics/crossplot-male.pdf")#
crossPlot(male)#
dev.off()#
#
pdf("graphics/crossplot-female.pdf")#
crossPlot(female)#
dev.off()#
#
pdf("graphics/crossplot-legend.pdf")#
plot.new()#
legend("left",#
  legend = sports.colors.symbols[,'sport'],#
  col    = sports.colors.symbols[,'color'],#
  pch    = as.numeric(#
            sports.colors.symbols[,'symbol']#
          ),#
  cex=0.8#
)#
dev.off()
athletes$height = athletes$height_converted#
athletes$weight = strtoi(athletes$weight)#
features = c("age", "height", "weight")#
target = "sport"#
male   = athletes[which(athletes$female==0),]#
female = athletes[which(athletes$female==1),]#
dim(female)
crossPlot = function(subset){#
  clPairs(data = subset[, features],#
    classification = subset[, target],#
    colors = subset$color,#
    symbols = as.numeric(subset$symbol)#
  )#
}
pdf("graphics/crossplot-male.pdf")#
crossPlot(male)#
dev.off()#
#
pdf("graphics/crossplot-female.pdf")#
crossPlot(female)#
dev.off()#
#
pdf("graphics/crossplot-legend.pdf")#
plot.new()#
legend("left",#
  legend = sports.colors.symbols[,'sport'],#
  col    = sports.colors.symbols[,'color'],#
  pch    = as.numeric(#
            sports.colors.symbols[,'symbol']#
          ),#
  cex=0.8#
)#
dev.off()
